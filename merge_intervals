//merge intervals
#include<bits/stdc++.h>
using namespace std;

struct Interval{
    int start,end;
};
bool compareInterval(Interval i1, Interval i2){
    return (i1.start < i2.start);
}
void mergeIntervals(Interval arr[],int n){
    //base case
    if(n <= 0)
    return;
    
    //create a stack
    stack<Interval>s;
    
    //sort according to the staring time
    sort(arr,arr+n,compareInterval);
    
    //push 1st interval to the stack
    s.push(arr[0]);
    
    for (int i = 1; i < n; i++) {
        Interval top = s.top();
    //now if next doesn't match push to stack
    if(top.end < arr[i].start)
    s.push(arr[i]);
    
    else if(top.end < arr[i].end){
    top.end=arr[i].end;
    s.pop();
    s.push(top);
    }
}
//print the stack
   cout << "\n The Merged Intervals are: ";
    while (!s.empty()) {
        Interval t = s.top();
        cout << "[" << t.start << "," << t.end << "] ";
        s.pop();
    }
    return;
}
  
// Driver program
int main()
{
    Interval arr[]
        = { {1,3},{2,6},{8,10},{15,18} };
    int n = sizeof(arr) / sizeof(arr[0]);
    mergeIntervals(arr, n);
    return 0;
}
